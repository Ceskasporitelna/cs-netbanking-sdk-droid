package cz.csas.netbanking.messages;

import cz.csas.cscore.client.rest.CallbackWebApi;
import cz.csas.cscore.client.rest.client.Response;
import cz.csas.cscore.error.CsSDKError;
import cz.csas.cscore.webapi.Resource;
import cz.csas.cscore.webapi.ResourceUtils;
import cz.csas.cscore.webapi.Transform;
import cz.csas.cscore.webapi.WebApiClient;
import cz.csas.cscore.webapi.apiquery.HasInstanceResource;
import cz.csas.cscore.webapi.apiquery.PaginatedListEnabled;

/**
 * The type Messages resource.
 *
 * @author Frantisek Kratochvil <kratochvilf@gmail.com>
 * @since 26.07.16.
 */
public class MessagesResource extends Resource implements PaginatedListEnabled<MessagesParameters, MessagesListResponse>, HasInstanceResource<MessageResource> {

    public MessagesResource(String basePath, WebApiClient client) {
        super(basePath, client);
    }

    /**
     * Get the resource of message with a given id
     *
     * @param id the id the message
     */
    @Override
    public MessageResource withId(Object id) {
        return new MessageResource(id, getBasePath(), getClient());
    }

    /**
     * Get all messages for current user generated by bank itself. Message can be read or unread,
     * mandatory and non-mandatory. This call might return different messages based on appId of the
     * caller (for example, some messages might be specific to an application).
     *
     * @param parameters the parameters
     * @param callback   the callback
     */
    @Override
    public void list(MessagesParameters parameters, CallbackWebApi<MessagesListResponse> callback) {
        ResourceUtils.callPaginatedList(this, parameters, new Transform<MessagesListResponse>() {
            @Override
            protected MessagesListResponse doTransform(MessagesListResponse entity, CsSDKError error, Response response) throws CsSDKError {
                if (entity != null && entity.getMessages() != null) {
                    for (Message message : entity.getMessages()) {
                        if (message.getAttachments() != null && message.getAttachments().size() != 0) {
                            for (Attachment attachment : message.getAttachments()) {
                                attachment.setMessage(message);
                            }
                        }
                    }
                }
                return entity;
            }
        }, MessagesListResponse.class, callback);
    }

    /**
     * Get mandatory messages resource
     *
     * @return the mandatory resource
     */
    public MessagesMandatoryResource getMandatoryResource() {
        return new MessagesMandatoryResource(appendPathWith("mandatory"), getClient());
    }
}
